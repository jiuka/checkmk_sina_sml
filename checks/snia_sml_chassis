#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# snia_sml_chassis - SINA Chassis check for Checkmk
#
# Copyright (C) 2020  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Example excerpt from SNMP data:
# .1.3.6.1.4.1.14851.3.1.4.10.1.1.1 = INTEGER: 1 --> SNIA-SML-MIB::subChassisIndex.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.2.1 = STRING: "IBM" --> SNIA-SML-MIB::subChassis-Manufacturer.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.3.1 = STRING: "3573-TL" --> SNIA-SML-MIB::subChassis-Model.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.4.1 = STRING: "3555L3A7800VVF" --> SNIA-SML-MIB::subChassis-SerialNumber.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.5.1 = INTEGER: false(2) --> SNIA-SML-MIB::subChassis-LockPresent.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.6.1 = INTEGER: 0 --> SNIA-SML-MIB::subChassis-SecurityBreach.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.7.1 = INTEGER: false(2) --> SNIA-SML-MIB::subChassis-IsLocked.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.8.1 = STRING: "IBM 3573-TL 3555L3A7800VVF" --> SNIA-SML-MIB::subChassis-.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.9.1 = STRING: "3573-TL 3555L3A7800VVF" --> SNIA-SML-MIB::subChassis-ElementName.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.10.1 = INTEGER: ok(2) --> SNIA-SML-MIB::subChassis-OperationalStatus.1
# .1.3.6.1.4.1.14851.3.1.4.10.1.11.1 = INTEGER: mainSystemChassis(17) --> SNIA-SML-MIB::subChassis-PackageType.1

subChassisOperationalStatus = {
    0:  (2, 'unknown'),
    1:  (2, 'other'),
    2:  (0, 'ok'),
    3:  (2, 'degraded'),
    4:  (1, 'stressed'),
    5:  (1, 'predictiveFailure'),
    6:  (2, 'error'),
    7:  (2, 'non-RecoverableError'),
    8:  (1, 'starting'),
    9:  (1, 'stopping'),
    10: (1, 'stopped'),
    11: (2, 'inService'),
    12: (2, 'noContact'),
    13: (2, 'lostCommunication'),
    14: (2, 'aborted'),
    15: (2, 'dormant'),
    16: (2, 'supportingEntityInError'),
    17: (2, 'completed'),
    18: (2, 'powerMode'),
    19: (2, 'dMTFReserved'),
}

subChassisPackageType = {
    0:     'Unknown',
    17:    'Main System Chassis',
    18:    'Expansion Chassis',
    19:    'Sub Chassis',
    32769: 'Service Bay'
}

def inventory_snia_sml_chassis(info):
    for chassis in info[0]:
        yield chassis[0], {}


def check_snia_sml_chassis(item, params, info):
    for line in info[0]:
        if line[0] == item:
            status = saveint(line[1])
            package = saveint(line[2])

            return subChassisOperationalStatus[status][0], '%s has status %s' % (subChassisPackageType[package], subChassisOperationalStatus[status][1])

    return 3, "Chassis not found"


check_info['snia_sml_chassis'] = {
    'inventory_function'    : inventory_snia_sml_chassis,
    'check_function'        : check_snia_sml_chassis,
    'service_description'   : 'Chassis: %s',
    'snmp_info'             : [('.1.3.6.1.4.1.14851.3.1.4.10.1', [
                                    '8',    # SNIA-SML-MIB::subChassis-Tag
                                    '10',    # SNIA-SML-MIB::subChassis-OperationalStatus
                                    '11',    # SNIA-SML-MIB::subChassis-PackageType
                               ])],
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.14851.3.1.1.0"),
}
